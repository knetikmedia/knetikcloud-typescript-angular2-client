/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



export interface CoreChallengeActivitySettings {
    /**
     * Whether the host can boot a user while the status is PLAYING. Null to inherit from activity
     */
    bootInPlay?: boolean;

    /**
     * A custom address (url, ip or whatever is needed in your game) that users should connect to to play in this challenge rather than the usual game server. Max length: 255
     */
    customLaunchAddress?: string;

    /**
     * Restriction for whether the host creating an occurrence can specify a custom launch address (such as their own ip address). Will override the challenge's custom_launch_address if they do. Null to inherit from activity
     */
    customLaunchAddressAllowed?: boolean;

    /**
     * Restriction for who can host an occurrence. admin disallows regular users, player means the user must also be a player in the occurrence if not admin, non-player means the user has the option to host without being a player. Null to inherit
     */
    hostOption?: CoreChallengeActivitySettings.HostOptionEnum;

    /**
     * Restriction for whether the host has control of the status once the game launches. If false they can only manage the game before (when setup and open). Max length: 255. Null to inherit from activity
     */
    hostStatusControl?: boolean;

    /**
     * Whether users can join while the status is PLAYING. Null to inherit from activity
     */
    joinInPlay?: boolean;

    /**
     * Whether users can leave while the status is PLAYING. Null to inherit from activity
     */
    leaveInPlay?: boolean;

    /**
     * The maximum number of players the game can hold. Null to inherit from activity
     */
    maxPlayers?: number;

    /**
     * The minimum number of players the game can hold. Null to inherit from activity
     */
    minPlayers?: number;

    /**
     * Restriction for who is able to report game end and results. Admin is always able to send results as well. Null to inherit from activity
     */
    resultsTrust?: CoreChallengeActivitySettings.ResultsTrustEnum;

}
export namespace CoreChallengeActivitySettings {
    export enum HostOptionEnum {
        AdminOnly = <any> 'admin_only',
        Player = <any> 'player',
        NonPlayer = <any> 'non_player'
    }
    export enum ResultsTrustEnum {
        None = <any> 'none',
        Host = <any> 'host',
        All = <any> 'all'
    }
}
