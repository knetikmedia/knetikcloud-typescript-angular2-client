/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Property } from './property';
import { RewardSetResource } from './rewardSetResource';
import { Schedule } from './schedule';


export interface ChallengeResource {
    /**
     * The number of activities allowed to this challenge
     */
    activities?: number;

    /**
     * A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
     */
    additionalProperties?: { [key: string]: Property; };

    /**
     * The id of the campaign this challenge is a part of. The challenge must be tied to an active campaign before it will spawn events
     */
    campaignId?: number;

    /**
     * The ID of the original challenge it was copied from
     */
    copyOf?: number;

    /**
     * The date/time this resource was created in seconds since unix epoch
     */
    createdDate?: number;

    /**
     * The end date of this challenge in seconds since epoch. required if part of a campaign
     */
    endDate?: number;

    /**
     * The unique ID for that resource
     */
    id?: number;

    /**
     * The strategy for calculating the leaderboard. Defaults to highest score. Value MUST come from the list of available strategies from the Leaderboard Service.
     */
    leaderboardStrategy?: string;

    /**
     * The user friendly name of that resource. Defaults to blank string
     */
    longDescription?: string;

    /**
     * The user friendly name of that resource
     */
    name: string;

    /**
     * The next date this challenge will be occur in seconds since epoch
     */
    nextEventDate?: number;

    /**
     * The number of minutes minimum to wait at the end of this challenge before running rewards, to allow activities to complete
     */
    rewardLagMinutes?: number;

    /**
     * The rewards to give at the end of the challenge. When creating/updating only id is used. Reward set must be pre-existing
     */
    rewardSet?: RewardSetResource;

    /**
     * The repeat schedule for the challenge
     */
    schedule?: Schedule;

    /**
     * The user friendly name of that resource. Defaults to blank string
     */
    shortDescription?: string;

    /**
     * The start date of this challenge in seconds since epoch. required if part of a campaign
     */
    startDate?: number;

    /**
     * A challenge template this challenge is validated against (private). May be null and no validation of additional_properties will be done
     */
    template?: string;

    /**
     * The date/time this resource was last updated in seconds since unix epoch
     */
    updatedDate?: number;

}
