/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { OAuth2Resource } from '../model/oAuth2Resource';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AccessTokenService {

    protected basePath = 'https://jsapi-integration.us-east-1.elasticbeanstalk.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get access token
     * 
     * @param grantType Grant type
     * @param clientId The id of the client
     * @param clientSecret The secret key of the client.  Used only with a grant_type of client_credentials
     * @param username The username of the client. Used only with a grant_type of password
     * @param password The password of the client. Used only with a grant_type of password
     * @param token The 3rd party authentication token. Used only with a grant_type of facebook, google, etc (social plugins)
     * @param refreshToken The refresh token obtained during prior authentication. Used only with a grant_type of refresh_token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOAuthToken(grantType: 'client_credentials' | 'password' | 'facebook' | 'google' | 'refresh_token', clientId: string, clientSecret?: string, username?: string, password?: string, token?: string, refreshToken?: string, observe?: 'body', reportProgress?: boolean): Observable<OAuth2Resource>;
    public getOAuthToken(grantType: 'client_credentials' | 'password' | 'facebook' | 'google' | 'refresh_token', clientId: string, clientSecret?: string, username?: string, password?: string, token?: string, refreshToken?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuth2Resource>>;
    public getOAuthToken(grantType: 'client_credentials' | 'password' | 'facebook' | 'google' | 'refresh_token', clientId: string, clientSecret?: string, username?: string, password?: string, token?: string, refreshToken?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuth2Resource>>;
    public getOAuthToken(grantType: 'client_credentials' | 'password' | 'facebook' | 'google' | 'refresh_token', clientId: string, clientSecret?: string, username?: string, password?: string, token?: string, refreshToken?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling getOAuthToken.');
        }
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling getOAuthToken.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (grantType !== undefined) {
            formParams = formParams.append('grant_type', <any>grantType) || formParams;
        }
        if (clientId !== undefined) {
            formParams = formParams.append('client_id', <any>clientId) || formParams;
        }
        if (clientSecret !== undefined) {
            formParams = formParams.append('client_secret', <any>clientSecret) || formParams;
        }
        if (username !== undefined) {
            formParams = formParams.append('username', <any>username) || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) || formParams;
        }
        if (token !== undefined) {
            formParams = formParams.append('token', <any>token) || formParams;
        }
        if (refreshToken !== undefined) {
            formParams = formParams.append('refresh_token', <any>refreshToken) || formParams;
        }

        return this.httpClient.post<OAuth2Resource>(`${this.basePath}/oauth/token`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
