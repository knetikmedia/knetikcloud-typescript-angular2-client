/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BreTriggerResource } from '../model/breTriggerResource';
import { PageResourceBreTriggerResource } from '../model/pageResourceBreTriggerResource';
import { Result } from '../model/result';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RuleEngineTriggersService {

    protected basePath = 'https://jsapi-integration.us-east-1.elasticbeanstalk.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a trigger
     * Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
     * @param breTriggerResource The BRE trigger resource object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createBRETrigger(breTriggerResource?: BreTriggerResource, observe?: 'body', reportProgress?: boolean): Observable<BreTriggerResource>;
    public createBRETrigger(breTriggerResource?: BreTriggerResource, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BreTriggerResource>>;
    public createBRETrigger(breTriggerResource?: BreTriggerResource, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BreTriggerResource>>;
    public createBRETrigger(breTriggerResource?: BreTriggerResource, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2_client_credentials_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (oauth2_password_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BreTriggerResource>(`${this.basePath}/bre/triggers`,
            breTriggerResource,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a trigger
     * May fail if there are existing rules against it. Cannot delete core triggers. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
     * @param eventName The trigger event name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBRETrigger(eventName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBRETrigger(eventName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBRETrigger(eventName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBRETrigger(eventName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (eventName === null || eventName === undefined) {
            throw new Error('Required parameter eventName was null or undefined when calling deleteBRETrigger.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2_client_credentials_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (oauth2_password_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/bre/triggers/${encodeURIComponent(String(eventName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a single trigger
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_USER
     * @param eventName The trigger event name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBRETrigger(eventName: string, observe?: 'body', reportProgress?: boolean): Observable<BreTriggerResource>;
    public getBRETrigger(eventName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BreTriggerResource>>;
    public getBRETrigger(eventName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BreTriggerResource>>;
    public getBRETrigger(eventName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (eventName === null || eventName === undefined) {
            throw new Error('Required parameter eventName was null or undefined when calling getBRETrigger.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2_client_credentials_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (oauth2_password_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BreTriggerResource>(`${this.basePath}/bre/triggers/${encodeURIComponent(String(eventName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List triggers
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_USER
     * @param filterSystem Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed
     * @param filterCategory Filter for triggers that are within a specific category
     * @param filterTags Filter for triggers that have all of the given tags (comma separated list)
     * @param filterName Filter for triggers that have names containing the given string
     * @param filterSearch Filter for triggers containing the given words somewhere within name, description and tags
     * @param size The number of objects returned per page
     * @param page The number of the page returned, starting with 1
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBRETriggers(filterSystem?: boolean, filterCategory?: 'achievement' | 'behavior' | 'comment' | 'disposition' | 'device' | 'entitlement' | 'friends' | 'fulfillment' | 'gamification' | 'inventory' | 'invoice' | 'media' | 'scheduler' | 'store' | 'subscription' | 'user' | 'wallet' | 'custom' | 'challenge' | 'activity' | 'campaign' | 'event', filterTags?: string, filterName?: string, filterSearch?: string, size?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<PageResourceBreTriggerResource>;
    public getBRETriggers(filterSystem?: boolean, filterCategory?: 'achievement' | 'behavior' | 'comment' | 'disposition' | 'device' | 'entitlement' | 'friends' | 'fulfillment' | 'gamification' | 'inventory' | 'invoice' | 'media' | 'scheduler' | 'store' | 'subscription' | 'user' | 'wallet' | 'custom' | 'challenge' | 'activity' | 'campaign' | 'event', filterTags?: string, filterName?: string, filterSearch?: string, size?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageResourceBreTriggerResource>>;
    public getBRETriggers(filterSystem?: boolean, filterCategory?: 'achievement' | 'behavior' | 'comment' | 'disposition' | 'device' | 'entitlement' | 'friends' | 'fulfillment' | 'gamification' | 'inventory' | 'invoice' | 'media' | 'scheduler' | 'store' | 'subscription' | 'user' | 'wallet' | 'custom' | 'challenge' | 'activity' | 'campaign' | 'event', filterTags?: string, filterName?: string, filterSearch?: string, size?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageResourceBreTriggerResource>>;
    public getBRETriggers(filterSystem?: boolean, filterCategory?: 'achievement' | 'behavior' | 'comment' | 'disposition' | 'device' | 'entitlement' | 'friends' | 'fulfillment' | 'gamification' | 'inventory' | 'invoice' | 'media' | 'scheduler' | 'store' | 'subscription' | 'user' | 'wallet' | 'custom' | 'challenge' | 'activity' | 'campaign' | 'event', filterTags?: string, filterName?: string, filterSearch?: string, size?: number, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filterSystem !== undefined && filterSystem !== null) {
            queryParameters = queryParameters.set('filter_system', <any>filterSystem);
        }
        if (filterCategory !== undefined && filterCategory !== null) {
            queryParameters = queryParameters.set('filter_category', <any>filterCategory);
        }
        if (filterTags !== undefined && filterTags !== null) {
            queryParameters = queryParameters.set('filter_tags', <any>filterTags);
        }
        if (filterName !== undefined && filterName !== null) {
            queryParameters = queryParameters.set('filter_name', <any>filterName);
        }
        if (filterSearch !== undefined && filterSearch !== null) {
            queryParameters = queryParameters.set('filter_search', <any>filterSearch);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2_client_credentials_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (oauth2_password_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageResourceBreTriggerResource>(`${this.basePath}/bre/triggers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a trigger
     * May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
     * @param eventName The trigger event name
     * @param breTriggerResource The BRE trigger resource object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBRETrigger(eventName: string, breTriggerResource?: BreTriggerResource, observe?: 'body', reportProgress?: boolean): Observable<BreTriggerResource>;
    public updateBRETrigger(eventName: string, breTriggerResource?: BreTriggerResource, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BreTriggerResource>>;
    public updateBRETrigger(eventName: string, breTriggerResource?: BreTriggerResource, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BreTriggerResource>>;
    public updateBRETrigger(eventName: string, breTriggerResource?: BreTriggerResource, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (eventName === null || eventName === undefined) {
            throw new Error('Required parameter eventName was null or undefined when calling updateBRETrigger.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2_client_credentials_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (oauth2_password_grant) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BreTriggerResource>(`${this.basePath}/bre/triggers/${encodeURIComponent(String(eventName))}`,
            breTriggerResource,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
